class Solution {
    public boolean isValidBST(TreeNode root) {
        return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);    
    }

    private boolean isValidBST(TreeNode root, long minVal, long maxVal) {
        if (root == null) return true;  // Base case: empty tree is a valid BST

        // Step 1: Check if the current node's value violates the BST property
        if (root.val <= minVal || root.val >= maxVal) return false;

        // Step 2: Recursively validate the left and right subtrees
        return isValidBST(root.left, minVal, root.val) &&   // Left subtree: values < root.val
               isValidBST(root.right, root.val, maxVal);    // Right subtree: values > root.val
    }
}
